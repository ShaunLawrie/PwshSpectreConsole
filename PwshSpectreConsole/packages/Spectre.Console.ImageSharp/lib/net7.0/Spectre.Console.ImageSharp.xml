<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spectre.Console.ImageSharp</name>
    </assembly>
    <members>
        <member name="T:Spectre.Console.CanvasImage">
            <summary>
            Represents a renderable image.
            </summary>
        </member>
        <member name="P:Spectre.Console.CanvasImage.Width">
            <summary>
            Gets the image width.
            </summary>
        </member>
        <member name="P:Spectre.Console.CanvasImage.Height">
            <summary>
            Gets the image height.
            </summary>
        </member>
        <member name="P:Spectre.Console.CanvasImage.MaxWidth">
            <summary>
            Gets or sets the render width of the canvas.
            </summary>
        </member>
        <member name="P:Spectre.Console.CanvasImage.PixelWidth">
            <summary>
            Gets or sets the render width of the canvas.
            </summary>
        </member>
        <member name="P:Spectre.Console.CanvasImage.Resampler">
            <summary>
            Gets or sets the <see cref="T:SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler"/> that should
            be used when scaling the image. Defaults to bicubic sampling.
            </summary>
        </member>
        <member name="M:Spectre.Console.CanvasImage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spectre.Console.CanvasImage"/> class.
            </summary>
            <param name="filename">The image filename.</param>
        </member>
        <member name="M:Spectre.Console.CanvasImage.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Spectre.Console.CanvasImage"/> class.
            </summary>
            <param name="data">Buffer containing an image.</param>
        </member>
        <member name="M:Spectre.Console.CanvasImage.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Spectre.Console.CanvasImage"/> class.
            </summary>
            <param name="data">Stream containing an image.</param>
        </member>
        <member name="M:Spectre.Console.CanvasImage.Measure(Spectre.Console.Rendering.RenderOptions,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Spectre.Console.CanvasImage.Render(Spectre.Console.Rendering.RenderOptions,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Spectre.Console.CanvasImageExtensions">
            <summary>
            Contains extension methods for <see cref="T:Spectre.Console.CanvasImage"/>.
            </summary>
        </member>
        <member name="M:Spectre.Console.CanvasImageExtensions.MaxWidth(Spectre.Console.CanvasImage,System.Nullable{System.Int32})">
            <summary>
            Sets the maximum width of the rendered image.
            </summary>
            <param name="image">The canvas image.</param>
            <param name="maxWidth">The maximum width.</param>
            <returns>The same instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Spectre.Console.CanvasImageExtensions.NoMaxWidth(Spectre.Console.CanvasImage)">
            <summary>
            Disables the maximum width of the rendered image.
            </summary>
            <param name="image">The canvas image.</param>
            <returns>The same instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Spectre.Console.CanvasImageExtensions.PixelWidth(Spectre.Console.CanvasImage,System.Int32)">
            <summary>
            Sets the pixel width.
            </summary>
            <param name="image">The canvas image.</param>
            <param name="width">The pixel width.</param>
            <returns>The same instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Spectre.Console.CanvasImageExtensions.Mutate(Spectre.Console.CanvasImage,System.Action{SixLabors.ImageSharp.Processing.IImageProcessingContext})">
            <summary>
            Mutates the underlying image.
            </summary>
            <param name="image">The canvas image.</param>
            <param name="action">The action that mutates the underlying image.</param>
            <returns>The same instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Spectre.Console.CanvasImageExtensions.BicubicResampler(Spectre.Console.CanvasImage)">
            <summary>
            Uses a bicubic sampler that implements the bicubic kernel algorithm W(x).
            </summary>
            <param name="image">The canvas image.</param>
            <returns>The same instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Spectre.Console.CanvasImageExtensions.BilinearResampler(Spectre.Console.CanvasImage)">
            <summary>
            Uses a bilinear sampler. This interpolation algorithm
            can be used where perfect image transformation with pixel matching is impossible,
            so that one can calculate and assign appropriate intensity values to pixels.
            </summary>
            <param name="image">The canvas image.</param>
            <returns>The same instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Spectre.Console.CanvasImageExtensions.NearestNeighborResampler(Spectre.Console.CanvasImage)">
            <summary>
            Uses a Nearest-Neighbour sampler that implements the nearest neighbor algorithm.
            This uses a very fast, unscaled filter which will select the closest pixel to
            the new pixels position.
            </summary>
            <param name="image">The canvas image.</param>
            <returns>The same instance so that multiple calls can be chained.</returns>
        </member>
    </members>
</doc>
